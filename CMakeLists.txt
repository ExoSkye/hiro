cmake_minimum_required(VERSION 3.0)
project(hiro LANGUAGES CXX)

add_library(hiro hiro.cpp)
target_include_directories(hiro INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(hiro INTERFACE ${CMAKE_SOURCE_DIR})
target_link_libraries(hiro PRIVATE nall)

option(Windows "Use Windows UI" OFF)
option(GTK2 "Use GTK2 UI" OFF)
option(GTK3 "Use GTK3 UI" OFF)
option(Cocoa "Use Cocoa UI" OFF)
option(QT4 "Use QT4 GUI" OFF)
option(QT5 "Use QT5 GUI" OFF)

if (NOT Windows)
    find_package(PkgConfig REQUIRED)
endif()

if (WIN32)
    # Windows
    enable_language(RC)

    if (Windows)
        message(STATUS "Building with Windows GUI")
    elseif(GTK2)
        message(STATUS "Building with GTK2 GUI")
    elseif(GTK3)
        message(STATUS "Building with GTK3 GUI")
    elseif(QT4 OR QT5)
        message(FATAL_ERROR "Can't use Qt4 or Qt5 on Windows")
    elseif (Cocoa)
        message(FATAL_ERROR "Can't use Cocoa GUI on non-MacOS platform")
    else()
        message(STATUS "Building with Windows GUI")
        set(Windows ON)
    endif()

    if (Windows)
        target_link_libraries(hiro PRIVATE kernel32 user32 gdi32 advapi32 ole32 comctl32 comdlg32 uxtheme msimg32 shlwapi dwmapi)
        target_compile_definitions(hiro PRIVATE HIRO_WINDOWS)
    elseif(GTK2)
        pkg_check_modules(GTK2 REQUIRED gtk+-2.0)
        target_link_libraries(hiro PRIVATE ${GTK2_LIBRARIES})
        target_include_directories(hiro PRIVATE ${GTK2_INCLUDE_DIRS})
        target_compile_definitions(hiro PRIVATE HIRO_GTK=2)
        target_compile_options(hiro PRIVATE -Wno-deprecated-declarations ${GTK2_CFLAGS})
    elseif(GTK3)
        pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
        target_link_libraries(hiro PRIVATE ${GTK3_LIBRARIES})
        target_include_directories(hiro PRIVATE ${GTK3_INCLUDE_DIRS})
        target_compile_definitions(hiro PRIVATE HIRO_GTK=3)
        target_compile_options(hiro PRIVATE -Wno-deprecated-declarations ${GTK3_CFLAGS})
    endif()
elseif(UNIX)
    if(Windows)
        message(FATAL_ERROR Can't use Windows GUI on non-Windows platformW)
    endif()

    if(APPLE)
        # MacOS
        enable_language(OBJC)
        enable_language(OBJCXX)

        if(Cocoa)
            message(STATUS "Building with Cocoa GUI")
        else()
            message(STATUS "Building with Cocoa GUI")
            set(Cocoa ON)
        endif()

        if(Cocoa)
            target_compile_options(hiro -w -DHIRO_COCOA -framework Cocoa -framework Carbon -framework IOKit -framework Security)
        endif()
    else()
        # Linux/BSD
        target_link_directories(hiro PRIVATE /usr/local/lib)

        if(GTK2)
            message(STATUS "Building with GTK2 GUI")
        elseif(GTK3)
            message(STATUS "Building with GTK3 GUI")
        elseif(QT4)
            message(STATUS "Building with QT4 GUI")
        elseif(QT5)
            message(STATUS "Building with QT5 GUI")
        elseif (Cocoa)
            message(FATAL_ERROR "Can't use Cocoa GUI on non-MacOS platform")
        else()
            message(STATUS "Building with GTK2 GUI")
            set(GTK2 ON)
        endif()

        if(GTK2)
            pkg_check_modules(GTK2 REQUIRED gtk+-2.0 gtksourceview-2.0)
            target_link_libraries(hiro PRIVATE X11 ${GTK2_LIBRARIES})
            target_include_directories(hiro PRIVATE ${GTK2_INCLUDE_DIRS})
            target_compile_definitions(hiro PRIVATE HIRO_GTK=2)
            target_compile_options(hiro PRIVATE -Wno-deprecated-declarations ${GTK2_CFLAGS})
        elseif(GTK3)
            pkg_check_modules(GTK3 REQUIRED gtk+-3.0 gtksourceview-3.0)
            target_link_libraries(hiro PRIVATE X11 ${GTK3_LIBRARIES})
            target_include_directories(hiro PRIVATE ${GTK3_INCLUDE_DIRS})
            target_compile_definitions(hiro PRIVATE HIRO_GTK=3)
            target_compile_options(hiro PRIVATE -Wno-deprecated-declarations ${GTK3_CFLAGS})
        elseif(QT4)
            pkg_check_modules(QT4 REQUIRED QtCore QtGui)
            target_link_libraries(hiro PRIVATE X11 ${QT4_LIBRARIES})
            target_include_directories(hiro PRIVATE ${QT4_INCLUDE_DIRS})
            target_compile_definitions(hiro PRIVATE HIRO_QT=4)
            target_compile_options(hiro PRIVATE ${QT4_CFLAGS})
        elseif(QT5)
            pkg_check_modules(QT5 REQUIRED Qt5Core Qt5Gui Qt5Widgets)
            target_link_libraries(hiro PRIVATE X11 ${QT5_LIBRARIES})
            target_include_directories(hiro PRIVATE ${QT5_INCLUDE_DIRS})
            target_compile_definitions(hiro PRIVATE HIRO_QT=5)
            target_compile_options(hiro PRIVATE ${QT5_CFLAGS})
        endif()
    endif()
endif()